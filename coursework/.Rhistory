knitr::opts_knit$set(root.dir = normalizePath("/Users/colinyeo/desktop/School/qbio_490_colin/analysis_data/"))
# load packages
library("BiocManager")
library("TCGAbiolinks")
knitr::opts_knit$set(root.dir = normalizePath("/PATH/TO/DIRECTORY"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocManager)
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks") # notice this is different from the typical "install.packages" command. that's because BiocManager is necessary to install and manage packages from the Bioconductor project
library(TCGAbiolinks)
# load packages
library("BiocManager")
library("TCGAbiolinks")
# load packages
library("BiocManager")
library("TCGAbiolinks")
# load packages
library("BiocManager")
install.packages("Matrix")
library("TCGAbiolinks")
library(MatrixGenerics)
detach("package:MatrixGenerics", unload = TRUE)
detach("package:matrixStats", unload = TRUE)
remove.packages("MatrixGenerics")
remove.packages("matrixStats")
# load packages
library("BiocManager")
install.packages("Matrix")
library("TCGAbiolinks")
# load packages
library("BiocManager")
install.packages("MatrixGenerics")
install.packages("Matrix")
library("TCGAbiolinks")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocManager)
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks") # notice this is different from the typical "install.packages" command. that's because BiocManager is necessary to install and manage packages from the Bioconductor project
library(TCGAbiolinks)
knitr::opts_knit$set(root.dir = normalizePath("/Users/colinyeo/desktop/School/qbio_490_colin/analysis_data/"))
# load packages
library("BiocManager")
library("TCGAbiolinks")
# load packages
library("BiocManager")
install.packages("Matrix")
library("TCGAbiolinks")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocManager)
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks") # notice this is different from the typical "install.packages" command. that's because BiocManager is necessary to install and manage packages from the Bioconductor project
library(TCGAbiolinks)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocManager)
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks", force-TRUE) # notice this is different from the typical "install.packages" command. that's because BiocManager is necessary to install and manage packages from the Bioconductor project
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocManager)
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks", force=TRUE) # notice this is different from the typical "install.packages" command. that's because BiocManager is necessary to install and manage packages from the Bioconductor project
library(TCGAbiolinks)
print(sum(is.na(clinical$age_at_initial_pathologic_diagnosis)))
knitr::opts_knit$set(root.dir = normalizePath("/Users/colinyeo/desktop/School/qbio_490_colin/analysis_data"))
# load in packages
library("BiocManager")
library("TCGAbiolinks")
clinical_query <- GDCquery(project="TCGA-BRCA", data.category="Clinical", file.type="xml")
clinical <- GDCprepare_clinic(clinical_query, clinical.info="patient")
print(sum(is.na(clinical$age_at_initial_pathologic_diagnosis)))
print(sum(is.na(clinical$margin_status)))
print(sum((clinical$age_at_initial_pathologic_diagnosis) == ""))
print(sum((clinical$margin_status) == ""))
clinical_query <- GDCquery(project="TCGA-BRCA", data.category="Clinical", file.type="xml")
clinical <- GDCprepare_clinic(clinical_query, clinical.info="drug")
clinical_query <- GDCquery(project="TCGA-BRCA", data.category="Clinical", file.type="xml")
clinical_query <- GDCquery(project="TCGA-BRCA", data.category="Clinical", file.type="xml")
clinical.drug <- GDCprepare_clinic(clinical_query, clinical.info="drug")
knitr::opts_knit$set(root.dir = normalizePath("/Users/colinyeo/desktop/School/qbio_490_colin/analysis_data/"))
clinical_query <- GDCquery(project="TCGA-BRCA", data.category="Clinical", file.type="xml")
GDCdownload(clinical_query) # ONLY RUN THIS ONCE! it is very slow
clinical_query <- GDCquery(project="TCGA-BRCA", data.category="Clinical", file.type="xml")
clinical.drug <- GDCprepare_clinic(clinical_query, clinical.info="drug")
knitr::opts_knit$set(root.dir = normalizePath("/Users/colinyeo/desktop/School/qbio_490_colin/analysis_data"))
clinical_query <- GDCquery(project="TCGA-BRCA", data.category="Clinical", file.type="xml")
clinical.drug <- GDCprepare_clinic(clinical_query, clinical.info="drug")
View(clinical.drug)
View(clinical.drug)
knitr::opts_knit$set(root.dir = normalizePath("/Users/colinyeo/desktop/School/qbio_490_colin/analysis_data/"))
# install and load maftools and TCGAbiolinks
library("BiocManager")
library("TCGAbiolinks")
install.packages("maftools")
library("maftools")
# install and load maftools and TCGAbiolinks
library("BiocManager")
library("TCGAbiolinks")
BiocManager::install("maftools")
library("maftools")
clinical <- read.csv("/Users/colinyeo/Desktop/School/qbio_490_colin/week4_hw/brca_clinical_data.csv")
colnames(clinical)[ colnames(clinical) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
# change the file path! make sure it's in your week4 folder
write.csv(clinical, "/Users/colinyeo/Desktop/School/qbio_490_colin/week4_hw/brca_clinical_data.csv", row.names = FALSE)
maf_query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Simple Nucleotide Variation",
access = "open", # we only have access to somatic mutations which are open access
data.type = "Masked Somatic Mutation",
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking"
)
GDCdownload(maf_query)
maf <- GDCprepare(maf_query) # as long as it runs, ignore any errors
maf_object <- read.maf(maf = maf,
clinicalData = clinical,
isTCGA = TRUE)
str(maf_object)
head(maf_query@data)
maf_object@data
maf_object@variants.per.sample
maf_object@variant.type.summary
maf_object@variant.classification.summary
maf_object@gene.summary
maf_object@summary
maf_object@maf.silent
maf_object@clinical.data
head(maf_object@data)
head(maf_object@data$Tumor_Sample_Barcode, 110)
head(maf_object@data$Tumor_Sample_Barcode, 110)
head(maf_object@clinical$Tumor_Sample_Barcode, 110)
head(maf_object@data$Tumor_Sample_Barcode, 110)
head(maf_object@clinical.data$Tumor_Sample_Barcode, 110)
maf_object@data$tp53 <- with(maf_object@data$tp53, ifelse(maf_object@data$Hugo_Symbol == "TP53", "true","false"))
maf_object@data$tp53 <- with(maf_object@data$tp53, ifelse(maf_object@data$Hugo_Symbol == "TP53", "true","false"))
maf_object@data$tp53 <- with(maf_object@data$tp53, ifelse(maf_object@data$Hugo_Symbol == "TP53", "true","false"))
maf_object@data$tp53 <- with(maf_object@data, ifelse(maf_object@data$Hugo_Symbol == "TP53", "true","false"))
print(maf_object@data$tp53)
TP53_mask <- with(maf_object@data, ifelse(maf_object@data$Hugo_Symbol == "TP53", "TRUE","FALSE"))
maf_object@data$Tumor_Sample_Barcode[TP53_mask]
maf_object@data$HGVSP_short[TP53_mask]
TP53_mask <- maf_object@data$Hugo_Symbol == "TP53"
maf_object@data$Tumor_Sample_Barcode[TP53_mask]
maf_object@data$HGVSP_short[TP53_mask]
TP53_mask <- with(maf_object@data, ifelse(maf_object@data$Hugo_Symbol == "TP53", TRUE, FALSE)
maf_object@data$Tumor_Sample_Barcode[TP53_mask]
TP53_mask <- with(maf_object@data, ifelse(maf_object@data$Hugo_Symbol == "TP53", TRUE, FALSE)
maf_object@data$Tumor_Sample_Barcode[TP53_mask]
TP53_mask <- with(maf_object@data, ifelse(maf_object@data$Hugo_Symbol == "TP53", TRUE, FALSE))
maf_object@data$Tumor_Sample_Barcode[TP53_mask]
maf_object@data$HGVSP_short[TP53_mask]
TP53_mask <- with(maf_object@data, ifelse(maf_object@data$Hugo_Symbol == "TP53", TRUE, FALSE))
maf_object@data$Tumor_Sample_Barcode[TP53_mask]
maf_object@data$HGVSP_Short[TP53_mask]
TP53_mask <- with(maf_object@data, ifelse(maf_object@data$Hugo_Symbol == "TP53", TRUE, FALSE))
maf_object@data$Tumor_Sample_Barcode[TP53_mask]
maf_object@data$HGVSp_Short[TP53_mask]
